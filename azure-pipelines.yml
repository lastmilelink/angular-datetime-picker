trigger:
  branches:
    include:
      - '*'  # Trigger on all branches
  paths:
    exclude:
      - README.md
      - .gitignore

# Trigger on git tags for stable releases
resources:
  repositories:
  - repository: self
    trigger:
      tags:
        include:
          - '*'  # Trigger on all tags

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '20.x'
  npmVersion: '10.x'
  npmOrg: 'softint'
  # These will be set dynamically based on build type
  packageVersion: ''
  npmTag: ''

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build Angular Library'
    steps:
    
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - task: Npm@1
      displayName: 'Install npm dependencies'
      inputs:
        command: 'install'
        workingDir: '.'
    
    - task: Npm@1
      displayName: 'Run unit tests'
      inputs:
        command: 'custom'
        customCommand: 'run test:ci'
        workingDir: '.'
    
    - task: Npm@1
      displayName: 'Build and package library'
      inputs:
        command: 'custom'
        customCommand: 'run package_linux'
        workingDir: '.'
    
    - task: PowerShell@2
      displayName: 'Create missing files to match original structure'
      inputs:
        targetType: 'inline'
        script: |
          # Create lib folder by copying from projects/picker/src/lib
          if (Test-Path "projects/picker/src/lib") {
            Copy-Item "projects/picker/src/lib" "dist/picker/" -Recurse -Force
            Write-Host "Created lib folder from projects/picker/src/lib"
          }
          
          # Create public_api.d.ts by copying from projects/picker/src/public_api.ts
          if (Test-Path "projects/picker/src/public_api.ts") {
            Copy-Item "projects/picker/src/public_api.ts" "dist/picker/public_api.d.ts" -Force
            Write-Host "Created public_api.d.ts from projects/picker/src/public_api.ts"
          }
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: 'dist'
        artifactName: 'dist'
        publishLocation: 'Container'

- stage: Publish
  displayName: 'Publish to NPM'
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: PublishJob
    displayName: 'Publish Package'
    steps:
    
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - task: Npm@1
      displayName: 'Install npm dependencies'
      inputs:
        command: 'install'
        workingDir: '.'
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download build artifacts'
      inputs:
        buildType: 'current'
        artifactName: 'dist'
        downloadPath: '.'
    
    - task: CopyFiles@2
      displayName: 'Copy .npmrc to dist/picker'
      inputs:
        sourceFolder: '.'
        contents: '.npmrc'
        targetFolder: 'dist/picker'
    
    - task: PowerShell@2
      displayName: 'Determine version and update package.json'
      inputs:
        targetType: 'inline'
        script: |
          # Get build information
          $branchName = "$(Build.SourceBranchName)"
          $commitHash = "$(Build.SourceVersion)".Substring(0, 7)
          $sourceBranch = "$(Build.SourceBranch)"
          
          Write-Host "Branch Name: $branchName"
          Write-Host "Commit Hash: $commitHash"
          Write-Host "Source Branch: $sourceBranch"
          
          # Sanitize branch name for npm tag (remove invalid characters)
          $sanitizedBranchName = $branchName -replace '[^a-zA-Z0-9\-]', '-'
          $sanitizedBranchName = $sanitizedBranchName -replace '^-+|-+$', ''
          if ($sanitizedBranchName -eq '') { $sanitizedBranchName = 'dev' }
          
          # Determine version and tag
          if ($sourceBranch -like "refs/tags/*") {
            $packageVersion = $branchName
            $npmTag = "latest"
            Write-Host "Stable release: $packageVersion"
          } else {
            $packageVersion = "0.0.0-$sanitizedBranchName.$commitHash"
            $npmTag = $sanitizedBranchName
            Write-Host "Development build: $packageVersion (tag: $npmTag)"
          }
          
          # Update package.json in dist/picker directory
          $packageJsonPath = "dist/picker/package.json"
          $packageJson = Get-Content $packageJsonPath | ConvertFrom-Json
          $packageJson.version = $packageVersion
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content $packageJsonPath
          
          Write-Host "Updated package.json version to: $packageVersion"
          Write-Host "NPM tag will be: $npmTag"
          
          # Set variables for npm publish
          Write-Host "##vso[task.setvariable variable=packageVersion]$packageVersion"
          Write-Host "##vso[task.setvariable variable=npmTag]$npmTag"
    
    - task: npmAuthenticate@0
      displayName: 'Authenticate with npm'
      inputs:
        workingFile: '.npmrc'
        customEndpoint: ''
    
    - task: Npm@1
      displayName: 'Publish to NPM'
      inputs:
        command: 'custom'
        customCommand: 'publish --tag $(npmTag) --access public --registry https://registry.npmjs.org/'
        workingDir: 'dist/picker'
      env:
        NPM_TOKEN: $(NPM_TOKEN)
    
    - task: PowerShell@2
      displayName: 'Log published package info'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Published package: @rifansi/angular-datetime-picker@$(packageVersion)"
          Write-Host "NPM tag: $(npmTag)"
          if ("$(Build.SourceBranch)" -like "refs/tags/*") {
            Write-Host "This is a stable release"
          } else {
            Write-Host "This is a development build"
            Write-Host "Install with: npm install @rifansi/angular-datetime-picker@$(packageVersion)"
          }